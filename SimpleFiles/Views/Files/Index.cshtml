@using PagedList
@using PagedList.Mvc
@using File = SimpleFiles.Models.File
@model SimpleFiles.ViewModels.FileViewModels.UploadViewModel

@{
    ViewBag.Title = "Index";

    StaticPagedList<File> files = ViewBag.Files;
}

<div class="panel panel-default">
    <div class="panel-heading">
        <span class="hidden-xs">Upload a File</span>
        <span class="visible-xs">Files</span>
    </div>

    <div class="panel-body">
        @using (@Html.BeginForm("Index", "Files", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-inline" }))
        {
            <div class="hidden-xs">
                @if (ViewData.ModelState.Keys.Any(k => ViewData.ModelState[k].Errors.Any()))
                {
                    <div class="alert alert-danger">
                        @Html.ValidationSummary()
                    </div>
                }

                <div class="form-group">
                    <label for="upload">File input</label>
                    <input type="file" id="upload" name="File" style="color: inherit;">
                    <p class="help-block">Choose a file to upload here.</p>
                </div>

                @Html.AntiForgeryToken()

                <button type="submit" class="btn btn-primary">Upload File</button>
            </div>
        }

        <p class="hidden-xs">
            Allowed file types:
            @{
                string[] fileTypesAllowed = ViewBag.FileTypesAllowed;

                if (fileTypesAllowed != null)
                {
                    var totalFileTypesAllowed = fileTypesAllowed.Count();

                    for (int i = 0; i < totalFileTypesAllowed; i++)
                    {
                        @Html.Raw(fileTypesAllowed[i])

                        if (i != (totalFileTypesAllowed - 1))
                        {
                            @Html.Raw(", ")
                        }
                    }
                }
            }
        </p>

        <p style="font-weight: bold;">Files are not scanned for viruses by the server. Download files at your own risk.</p>
    </div>

    @if (files != null)
    {
        <table class="table">
            <tr>
                <th>Name</th>
                <th>Uploaded (UTC)</th>
                <th class="text-right">Size</th>
                <th>Type</th>
            </tr>
            @foreach (var item in files)
            {
                <tr>
                    <td>
                        @if (item.Type.StartsWith("image"))
                        {
                            @Html.Raw("<button type=\"button\" class=\"btn btn-info btn-xs previewImage\" data-toggle=\"modal\" data-target=\"#previewModal\">Preview</button>")
                        }
                        <a href="@Href("~/uploads/" + Path.GetFileName(item.Name))" class="fileLink" target="_blank">@item.Name</a>
                    </td>
                    <td>
                        @{ var dateFormatted = @Html.DisplayFor(modelItem => item.Uploaded); }
                        <time title="@dateFormatted (UTC)" datetime="@item.Uploaded.ToString("O")">@dateFormatted</time>
                    </td>
                    <td class="text-right">@File.FormatSize(item.Size)</td>
                    <td>@Html.DisplayFor(modelItem => item.Type)</td>
                </tr>
            }
        </table>

        <!-- Modal -->
        <div class="modal fade" id="previewModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h4 class="modal-title" id="myModalLabel">Preview</h4>
                    </div>
                    <div class="modal-body"></div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@if (files != null)
{
    @Html.PagedListPager(files, page => Url.Action("Index", new { page }), PagedListRenderOptions.ClassicPlusFirstAndLast)
}